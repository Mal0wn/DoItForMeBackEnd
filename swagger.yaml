openapi: 3.0.0
info:
  description: “Micro-service for DO4M”
  version: “1.0.0"
  title: “ Hello MotherFuckers”

servers:
  - url: http://localhost:3000/
tags:
  - name: mission
    description: Everything about mission
  - name: user
    description: Operations about user
  - name: address
    description: Address available URLs
  - name: message
    description: Message available URLs
paths:
  /mission:
    put:
      tags:
        - mission
      summary: Update an existing mission
      description: Update an existing mission by Id
      operationId: updateMission
      requestBody:
        description: Update an existent mission (NOT FONCTIONAL)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mission'
          application/xml:
            schema:
              $ref: '#/components/schemas/Mission'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Mission'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mission'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Mission'
        '400':
          description: Invalid ID supplied
        '404':
          description: Mission not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:missions
            - read:missions
    post:
      tags:
        - mission
      summary: Add a new mission 
      description: Add a new mission 
      operationId: create
      requestBody:
        description: Create a new mission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mission'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mission'          
        '400':
          description: Invalid input
      security:
        - petstore_auth:
            - write:missions
            - read:missions
  /mission/findByStatus:
    get:
      tags:
        - mission
      summary: Finds Missions by status
      description: Multiple status values can be provided with comma separated strings (NOT FONCTIONNAL)
      operationId: findMissionsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mission'          
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:missions
            - read:missions
  /mission/{missionId}:
    get:
      tags:
        - mission
      summary: Find mission by ID
      description: Returns a single mission
      operationId: findById
      parameters:
        - name: missionId
          in: path
          description: ID of mission to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mission'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Mission'
        '400':
          description: Invalid ID supplied
        '404':
          description: Mission not found
    delete:
      tags:
        - mission
      summary: Remove a mission 
      description: Remove a mission 
      operationId: delete
      requestBody:
        description: Delete an existing mission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mission'
          application/xml:
            schema:
              $ref: '#/components/schemas/Mission'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Mission'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
      security:
        - petstore_auth:
            - write:missions
            - read:missions
  /mission/{missionId}/uploadImage:
    post:
      tags:
        - mission
      summary: uploads an image (mais autant utiliser update ?)
      description: ''
      operationId: uploadFile
      parameters:
        - name: missionId
          in: path
          description: ID of mission to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /mission/findByRadius:
    get:
      tags:
        - mission
      summary: search missions in defined radius / position
      description: 'return an array of Mission'
      operationId: searchMission
      parameters:
          - in: query
            name: latitude
            required: true
            schema:
              type: float
            description: current latitude of user
          - in: query
            name: longitude
            required: true
            schema:
              type: float
            description: current longitude of user
          - in: query
            name: radius
            required: true
            schema:
              type: integer
            description: radius to search in kilometers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mission'          
        '400':
          description: Invalid parameters supplied
        '404':
          description: No Mission Found for current parameters
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: create
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/conversations/{userId}:
    get:
      tags:
        - user
      summary: Find all users you have a conversation With
      description: Find all users you have a conversation With for given ID
      operationId: findConversationsById
      parameters:
        - name: userId
          in: path
          description: ID of target User
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
        '400':
          description: Invalid ID supplied
        '404':
          description: No Conversations for current User
  /user/conversations/mission/{userId}:
    get:
      tags:
        - user
      summary: Find all Users that sent you a message for given Mission
      description: Find all Users that sent you a message for given User & Mission ID
      operationId: findMissionConversationsById
      parameters:
        - name: userId
          in: path
          description: ID of target User
          required: true
          schema:
            type: integer
            format: int64
        - name: missionId
          in: query
          description: ID of target Mission
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
        '400':
          description: Invalid ID supplied
        '404':
          description: No Conversations for current User
  /address:
    post:
      tags:
        - address
      summary: Create Address
      description: This can only be done by the logged in user.
      operationId: create
      parameters:
        - name: addressId
          in: path
          description: ID of Address to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Created Address object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Invalid input
        '404':
          description: User Not Found
    put:
      tags:
        - address
      summary: Update Address
      description: This can only be done by the logged in user.
      operationId: update
      requestBody:
        description: Updated Address object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Invalid input
        '404':
          description: User Not Found
  /address/{addressId}:
    delete:
      tags:
        - address
      summary: Delete Address
      description: Delete Address
      operationId: delete
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Address Not Found
      security:
        - petstore_auth:
            - write:address
            - read:address
components:
  schemas:
    Address:
      required:
        - id
        - number
        - street
        - zip_code
        - city
        - country  
        - complement
        - latitude
        - longitude
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        number : 
          type : number 
          example : '403' 
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        complement:
          type: string
          example: Quarter 435
        country:
          type: string
          example: Canada
        zip_code:
          type: string
          example: '94301'
        latitude: 
          type: float
          example: '89.99999'
        longitude:
          type: float
          example: '179.99999'
      xml:
        name: address
    User:
      required:
          - id
          - firstname
          - lastname
          - email
          - password
          - birthday
          - role 
          - phone
      type: object
      properties:
          id:
            type: integer
            format: int64
            example: 10
          firstName:
            type: string
            example: Homer
          lastName:
            type: string
            example: Simpson
          email:
            type: string
            example: h.simpson@groening.com
          password:
            type: string
            example: 'MargeIsSoBrave43'
          phone:
            type: string
            example: '0706050403'
          birthday:
            type: date 
            example: "1987-02-14T23:00:00.000Z"
          role:
            type: string
            description: User Role = Admin or User
            example: Admin
      xml:
          name: user
    Mission:
      required:
        - id
        - picture
        - status
        - price
        - title 
        - description
        - creation_date
        - id_create 
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        picture:
          type: string
        status:
          type: string
          description: mission status
        title:
          type: string
          example: Garder mon chien  
        price:
          type: number
          example: 35
        description:
          type: string
          example: Je cherche une dog sitter pour s'occuper de mon chien le 24 décembre
        creation_date : 
          type : date
          example : "2022-04-09T23:00:00.000Z"
      xml:
        name: mission
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://localhost:3000.swagger.io/oauth/authorize
          scopes:
            write:pets: modify missions in your account
            read:pets: read your missions
    api_key:
      type: apiKey
      name: api_key
      in: header